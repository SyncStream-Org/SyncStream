import React from 'react';
import './settings.css';

import { Types } from 'syncstream-sharedlib';
import { Check, Trash2, X } from 'lucide-react';
import { Time } from 'syncstream-sharedlib/utilities';
import Localize from '../../utilities/localize';
import * as api from '../../api';
import PrimaryButton from '../../components/buttons/primary-button';
import PrimaryInput from '../../components/inputs/primary-input';

interface Props {}

interface State {
  allUsers: Types.UserData[];
}

export default class UserManagementSettings extends React.Component<
  Props,
  State
> {
  constructor(props: Props) {
    super(props);

    // Grab localize engine
    const localize = Localize.getInstance().localize();

    this.state = {
      allUsers: [],
    };

    // Grab all users
    api.Admin.getAllUsers().then((res) => {
      if (
        res.success === api.SuccessState.ERROR ||
        res.success === api.SuccessState.FAIL
      ) {
        window.electron.ipcRenderer.invokeFunction('show-message-box', {
          title: localize.settingsPage.userManagement.messageBox.errorTitle,
          message: localize.settingsPage.userManagement.messageBox.userGetError,
        });
      } else {
        if (res.data === undefined) throw Error('Unreachable');
        this.setState({ allUsers: res.data });
      }
    });
  }

  render() {
    // Grab localize engine
    const localize = Localize.getInstance().localize();

    const deleteUser = (username: string) => {
      api.Admin.deleteUser(username).then(async (res) => {
        if (res === api.SuccessState.ERROR || res === api.SuccessState.FAIL) {
          window.electron.ipcRenderer.invokeFunction('show-message-box', {
            title: localize.settingsPage.userManagement.messageBox.errorTitle,
            message:
              localize.settingsPage.userManagement.messageBox.userDeleteError,
          });
        } else {
          await Time.delay(100);
          api.Admin.getAllUsers().then((userData) => {
            if (
              userData.success === api.SuccessState.FAIL ||
              userData.success === api.SuccessState.ERROR
            ) {
              throw new Error('Unable to get the new user list.');
            }

            if (userData.data === undefined) throw new Error('Unreachable');
            this.setState({ allUsers: userData.data });
          });
        }
      });
    };

    const createUser = (event: React.SyntheticEvent) => {
      event.preventDefault();
      const target = event.target as typeof event.target & {
        username: { value: string };
        email: { value: string };
        password: { value: string };
        isAdmin: { checked: boolean };
        displayName: { value: string };
      };

      // TODO: support autogenerated passwords
      api.Admin.createUser(
        target.username.value,
        target.email.value,
        target.isAdmin.checked,
        target.displayName.value,
      ).then(async (res) => {
        if (
          res === api.SuccessState.ERROR ||
          res === api.SuccessState.FAIL
        ) {
          window.electron.ipcRenderer.invokeFunction('show-message-box', {
            title: localize.settingsPage.userManagement.messageBox.errorTitle,
            message:
              localize.settingsPage.userManagement.messageBox.userCreateError,
          });
        } else {
          await Time.delay(100);
          api.Admin.getAllUsers().then((userData) => {
            if (
              userData.success === api.SuccessState.FAIL ||
              userData.success === api.SuccessState.ERROR
            ) {
              throw new Error('Unable to get the new user list.');
            }

            if (userData.data === undefined) throw new Error('Unreachable');
            this.setState({ allUsers: userData.data });
          });
        }
      });
    };

    // ---- RENDER BLOCK ----
    return (
      <>
        <h2 className="text-xl text-gray-800 dark:text-gray-100">
          {localize.settingsPage.userManagement.users.title}
        </h2>

        {this.state.allUsers.length === 0 ? (
          <p className="text-gray-900 dark:text-gray-300">
            {localize.settingsPage.userManagement.users.noUsers}
          </p>
        ) : (
          <table className="table-auto w-full mt-3">
            <thead>
              <tr>
                <th>{localize.settingsPage.userManagement.users.username}</th>
                <th>
                  {localize.settingsPage.userManagement.users.displayName}
                </th>
                <th>{localize.settingsPage.userManagement.users.email}</th>
                <th>{localize.settingsPage.userManagement.users.admin}</th>
                <th />
              </tr>
            </thead>
            <tbody>
              {this.state.allUsers.map((user) => (
                <tr key={user.username}>
                  <td className="text-center">{user.username}</td>
                  <td className="text-center">{user.displayName}</td>
                  <td className="text-center">{user.email}</td>
                  <td>
                    {user.admin ? (
                      <Check className="mx-auto" />
                    ) : (
                      <X className="mx-auto" />
                    )}
                  </td>
                  <td>
                    <button
                      type="button"
                      className="m-auto hover:text-gray-600 dark:hover:text-gray-400 focus:text-orange-400 dark:focus:border-orange-400"
                      onClick={() => deleteUser(user.username)}
                    >
                      <Trash2 className="max-h-4" />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}

        <hr className="my-5 text-gray-600 dark:text-gray-400 border-1" />

        <h2 className="text-xl text-gray-800 dark:text-gray-100">
          {localize.settingsPage.userManagement.createUser.title}
        </h2>

        <form onSubmit={createUser}>
          <PrimaryInput
            labelClassName="mt-1"
            label={localize.settingsPage.userManagement.createUser.username}
            id="username"
            type="text"
          />
          <PrimaryInput
            labelClassName="mt-3"
            label={localize.settingsPage.userManagement.createUser.email}
            id="email"
            type="email"
          />
          <PrimaryInput
            labelClassName="mt-3"
            label={localize.settingsPage.userManagement.createUser.displayName}
            id="displayName"
            type="text"
          />
          <PrimaryInput
            labelClassName="mt-3"
            label={localize.settingsPage.userManagement.createUser.admin}
            id="isAdmin"
            type="checkbox"
          />
          <PrimaryButton
            className="mt-3"
            text={localize.settingsPage.userManagement.createUser.submit}
            type="submit"
          />
        </form>
      </>
    );
  }
}
